###we will expose mysql using a service
    266  nano mysqlsrv.yml
  ##############
apiVersion: v1
kind: Service
metadata:
  name: mysql 
spec:
  selector:
    app: mysql
  ports:
  - port: 3306
  clusterIP: None
  267  kubectl apply -f mysqlsrv.yml
    ####look into the cluster ip service see if you can find something interesting
  268  kubectl get svc
  269  kubectl describe svc mysql
#lets check the dns service in k8s 
#we will create a dns pod 
[root@ip-172-31-115-211 ~]$ kubectl apply -f https://k8s.io/examples/admin/dns/dnsutils.yaml
pod/dnsutils created

[root@ip-172-31-115-211 ~]$ kubectl exec -i -t dnsutils -- nslookup kubernetes.default
Server:         10.96.0.10
Address:        10.96.0.10#53

Name:   kubernetes.default.svc.cluster.local
Address: 10.96.0.1
###after that we will check the dns service of mysql internal dns resultion working or not 
[root@ip-172-31-115-211 ~]$ kubectl exec -i -t dnsutils -- nslookup mysql.default
Server:         10.96.0.10
Address:        10.96.0.10#53

Name:   mysql.default.svc.cluster.local
Address: 192.168.0.8
###this is happeing becuase of the coredns service installed while installoing k8s
[root@ip-172-31-115-211 ~]$ kubectl get pod -A
NAMESPACE       NAME                                        READY   STATUS    RESTARTS        AGE

kube-system     coredns-668d6bf9bc-f7sfx                    1/1     Running   2 (4h24m ago)   45h
kube-system     coredns-668d6bf9bc-zkb6x                    1/1     Running   2 (4h24m ago)   45h
############lets create the frontend pod 
lets create the frontend
###########################################
nano frontend.yml
##################################
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
spec:
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      initContainers:
      - name: init-db
        image: busybox
        command: ['sh', '-c', 'echo -e "Checking for the availability of MySQL Server deployment"; while ! nc -z mysql 3306; do sleep 1; printf "-"; done; echo -e "  >> MySQL DB Server has started";']

      containers:
      - name: frontend
        image: stacksimplify/kube-usermgmt-webapp:1.0.0-MySQLDB

        ports:
        - containerPort: 8080
        env:
        - name: DB_HOSTNAME
          value: "mysql"
        - name: DB_PORT
          value: "3306"
        - name: DB_NAME
          value: "webappdb"
        - name: DB_USERNAME
          value: root
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-db-password #this is the name of the secret we create
              key: dbpass #in the secret file we have the key as dbpass
##################################################
kubectl apply -f frontend.yml
#################################
[root@ip-172-31-115-211 ~]$ kubectl get pod
NAME                        READY   STATUS    RESTARTS        AGE

frontend-65d5f46f5f-djk6k   1/1     Running   0               3m52s
#check the logs of the frotnned
kubectl logs frontend-65d5f46f5f-djk6k
###
lets expose the frontend service
 291  kubectl expose deploy frontend --type=NodePort --port=8080
####once expose check the port number 
[root@ip-172-31-115-211 ~]$ kubectl get svc
NAME               TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)          AGE

frontend           NodePort    10.104.6.192    <none>        8080:32468/TCP   49m
##copy the second machine ip and this frontend service port number and access the app
##username : admin101
##password password101
###once you login 
#create a new user
##chek the reflection in mysql database
#########################
[root@ip-172-31-115-211 ~]$ kubectl get pod
NAME                        READY   STATUS    RESTARTS        AGE

mysql-55744bfbb6-7tbbc      1/1     Running   0               174m
#change the pod name to your pod name 
[root@ip-172-31-115-211 ~]$ kubectl exec -it mysql-55744bfbb6-7tbbc -- /bin/bash
##lets login inside the pod 
root@mysql-55744bfbb6-7tbbc:/# mysql -u root -p
Enter password:
##password is dbpassword11
###lets look into the database
mysql> show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| performance_schema |
| usermgmt           |
| webappdb           |
+--------------------+
5 rows in set (0.00 sec)

mysql>
mysql> use webappdb;
Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A

Database changed
############
mysql> show tables;
+--------------------+
| Tables_in_webappdb |
+--------------------+
| role               |
| user               |
| user_role          |
+--------------------+
3 rows in set (0.00 sec)

###############query the user tables
mysql> select * from user;
+--------+----------------------------+------------+-----------+--------------------------------------------------------------+--------+-----------+
| userid | email_address              | first_name | last_name | password                                                     | ssn    | user_name |
+--------+----------------------------+------------+-----------+--------------------------------------------------------------+--------+-----------+
|    101 | admin101@stacksimplify.com | Kalyan     | Reddy     | $2a$10$w.2Z0pQl9K5GOMVT.y2Jz.UW4Au7819nbzNh8nZIYhbnjCi6MG8Qu | ssn101 | admin101  |
|    102 | gopal1409@gmail.com        | gopal      | das       | $2a$10$mWHx2I4LIMR5D5bb4hZsH.lsIW8VItvvnZ1m/8DYnNJoXbJ/Vb4QK | 121    | gopal     |
+--------+----------------------------+------------+-----------+--------------------------------------------------------------+--------+-----------+
2 rows in set (0.00 sec)
##finally you can see the record is added 




